var should = require('should'),
	fs = require('fs'),
	path = require('path'),
	util = require('util'),
	generate = require('../'),
	cfg = {
		mysql: {
			dev: 'mysql://root@127.0.0.1:33061/',
			travis: 'mysql://root@127.0.0.1/'
		},
		pg: {
			dev: 'postgres://sqlgenerate:password@127.0.0.1:54320/postgres',
			travis: 'postgres://postgres@127.0.0.1/postgres'
		}
	};

describe('generator', function() {
	describe('argument validation', function() {
		it('should explode if dsn is missing', function(done) {
			generate({}, function(err) {
				err.should.be.instanceOf(Error);
				err.should.have.property('message', 'options.dsn is required');
				done();
			});
		});

		it('should explode if dialect is missing', function(done) {
			generate({ dsn: 'foo!' }, function(err) {
				err.should.be.instanceOf(Error);
				err.should.have.property('message', 'options.dialect is required');
				done();
			});
		});

		it('should explode if dialect is unsupported', function(done) {
			generate({ dsn: 'foo!', dialect: 'bar' }, function(err) {
				err.should.be.instanceOf(Error);
				err.should.have.property('message', 'options.dialect must be either "mysql" or "pg"');
				done();
			});
		});

		it('should explode if database is missing and not part of the DSN', function(done) {
			generate({ dsn: 'mysql://foo:bar@localhost/' }, function(err) {
				err.should.be.instanceOf(Error);
				err.should.have.property('message', 'options.database is required if it is not part of the DSN');
				done();
			});
		});
	});

	var database = 'node_sql_generate',
		dialects = {
			mysql: process.env.TRAVIS ? cfg.mysql.travis : cfg.mysql.dev,
			pg: process.env.TRAVIS ? cfg.pg.travis : cfg.pg.dev
		},
		getExpected = function(name) {
			return fs.readFileSync(path.join(__dirname, 'expected', name + '.js'), 'utf8');
		},
		removeAutogeneratedComment = function(string) {
			return string.replace(/\/\/ autogenerated.+?(\r\n|\n)/, '');
		},
		options = function(options, defaults) {
			return util._extend(util._extend({}, defaults), options);
		};

	for (var dialect in dialects) {
		var dsn = dialects[dialect],
			db = require(dialect),
			client;

		(function(dsn, db, dialect) {
			var defaults = {
				dsn: dsn,
				dialect: dialect
			};
			describe('for ' + dialect, function() {
				var realDatabase;
				switch (dialect) {
					case 'mysql':
						defaults.database = realDatabase = database;
						break;
					case 'pg':
						defaults.database = realDatabase = 'postgres';
						defaults.schema = database;
						break;
				}

				before(function(done) {
					function runScripts(err) {
						should.not.exist(err);
						var sql = fs.readFileSync(path.join(__dirname, 'scripts', dialect + '-before.sql'), 'utf8');
						client.query(sql, done);
					}

					switch (dialect) {
						case 'mysql':
							client = db.createConnection(dsn + '?multipleStatements=true');
							client.connect(runScripts);
							break;
						case 'pg':
							client = new db.Client(dsn);
							client.connect(runScripts);
							break;
					}
				});

				after(function(done) {
					function runScripts(callback) {
						var sql;
						if (dialect === 'mysql') {
							sql = fs.readFileSync(path.join(__dirname, 'scripts', dialect + '-after.sql'), 'utf8');
						} else if (dialect === 'pg') {
							sql = 'drop table node_sql_generate.foo;';
							sql += ' drop table node_sql_generate.bar;';
							sql += ' drop schema node_sql_generate;';
						}
						client.query(sql, callback);
					}

					switch (dialect) {
						case 'mysql':
							runScripts(function(scriptErr) {
								client.end(function(err) {
									done(scriptErr || err);
								});
							});
							break;
						case 'pg':
							runScripts(function(scriptErr) {
								client.end();
								done(scriptErr);
							});
							break;
					}
				});

				it('with dialect embedded in dsn', function(done) {
					var options = {
						dsn: dsn
					};
					if (dialect === 'pg') {
						options.schema = database;
					} else {
						options.database = database;
					}
					generate(options, function(err, stats) {
						should.not.exist(err);
						var expected = getExpected('defaults');
						removeAutogeneratedComment(stats.buffer).should.equal(expected);
						done();
					});
				});

				it('with defaults', function(done) {
					generate(defaults, function(err, stats) {
						should.not.exist(err);
						var expected = getExpected('defaults');
						removeAutogeneratedComment(stats.buffer).should.equal(expected);
						done();
					});
				});

				it('with custom indentation character', function(done) {
					generate(options({ indent: '  ' }, defaults), function(err, stats) {
						should.not.exist(err);
						var expected = getExpected('indent');
						removeAutogeneratedComment(stats.buffer).should.equal(expected);
						done();
					});
				});

				it('with camel cased name', function(done) {
					generate(options({ camelize: true }, defaults), function(err, stats) {
						should.not.exist(err);
						var expected = getExpected('camelize');
						removeAutogeneratedComment(stats.buffer).should.equal(expected);
						done();
					});
				});

				it('with custom EOL character', function(done) {
					generate(options({ eol: '\r\n' }, defaults), function(err, stats) {
						should.not.exist(err);
						var expected = getExpected('eol');
						removeAutogeneratedComment(stats.buffer).should.equal(expected);
						done();
					});
				});

				it('with prepended text', function(done) {
					generate(options({ prepend: '//hello world' }, defaults), function(err, stats) {
						should.not.exist(err);
						var expected = getExpected('prepend');
						removeAutogeneratedComment(stats.buffer).should.equal(expected);
						done();
					});
				});

				it('with appended text', function(done) {
					generate(options({ append: '//hello world' }, defaults), function(err, stats) {
						should.not.exist(err);
						var expected = getExpected('append');
						removeAutogeneratedComment(stats.buffer).should.equal(expected);
						done();
					});
				});

				it('with omitted comments', function(done) {
					generate(options({ omitComments: true }, defaults), function(err, stats) {
						should.not.exist(err);
						var expected = getExpected('omit-comments');
						stats.buffer.should.equal(expected);
						done();
					});
				});

				it('with schema included', function(done) {
					generate(options({ includeSchema: true }, defaults), function(err, stats) {
						should.not.exist(err);
						var expected = getExpected('include-schema');
						removeAutogeneratedComment(stats.buffer).should.equal(expected);
						done();
					});
				});

				it('with modularization', function(done) {
					generate(options({ modularize: true }, defaults), function(err, stats) {
						should.not.exist(err);
						var expected = getExpected('modularize');
						removeAutogeneratedComment(stats.buffer).should.equal(expected);
						done();
					});
				});
			});
		}(dsn, db, dialect));
	}
});