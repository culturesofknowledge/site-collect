{
  "name": "mongoose-datatable",
  "description": "Server side dataTable request support for mongoose",
  "version": "0.2.5",
  "repository": {
    "type": "git",
    "url": "https://github.com/eherve/mongoose-datatable.git"
  },
  "author": {
    "name": "Eric Herve",
    "email": "eric.herve.95@gmail.com"
  },
  "main": "./index",
  "directories": {
    "lib": "."
  },
  "engines": {
    "node": ">= 0.8.1"
  },
  "keywords": [
    "mongoose",
    "dataTable"
  ],
  "readme": "# mongoose-dataTable\n\nServer side dataTable request support for mongoose.\n\nSupport mongoose version >= 3.8.0\n\nSupport mongoDB version >= 2.4\n\n## Install\n\n    npm install mongoose-datatable\n\n## Loading\n\n    var DataTable = require('mongoose-datatable');\n    \n## Configuration\n\n    DataTable.configure(options);\n    \n### Options\n\nConfiguration is not mandatory, the default options contains only the default handlers, for other types, an unknown type message is displayed on the console (see verbose option).\n\n#### Debug\n\nIf the debug option is set to true (default false), the module will print the query from the dataTable and all the fields, conditions, sort and data retrieve.\nThis can be set also via the method <i>enableDebug(true)</i>.\n\n#### Verbose\n\nIf the verbose option is set to true (default false), the module will print on the console when the condition builder has no handler for a field type.\nIn the default configuration, only the String condition builder exist, all other field type will trigger the log on the console of an unknown handler type.\nThis can be set also via the method <i>enableVerbose(true)</i>.\n\n#### Logger\n\nIf the options contains a logger [key: logger, value: function(level, args)], the default logger <i>console.log</i> is override by it.\nIt allows to use an application specific logger.\n\n#### Condition handlers\n\nThe condition handlers is an object that contains handlers (functions) with for key, mongoose schema field type name.\neg. String, Date, Boolean...\nIt is possible to declare a default handler (key: default) that will be used if no handler found for a specific type.\nThese handlers are called when the module try to build the condition on a field. They can return a condition object for the field to match ( eg.: { $in: [...] } ) and have for arguments:\n\n* field\n\n    The field for which the condition is build. The field has several properties that can be used to decide what kind of condition should be build.\nProperties:\n\n    * index\n\n        The column index (from 0) of the field in the table.\n\n    * path\n\n        The path (name) of the field used to specify it on the client side.\n\n    * searchable\n\n        A boolean specifying if the field is searchable.\n\n    * search\n\n        An array containing the search value applied on the field (undefined if no search value apllied).\n\n    * sortable\n\n        A boolean specifying if the field is sortable.\n\n    * sort\n\n        An object containing the sort direction and the sort precedence (undefined if not sorted).\n\n    * selectable\n\n        A boolean specifying if the field is selectable.\n\n    * type\n\n        A string representing the type of the field.\n\n    * ref\n\n        A string representing the referenced model if the field is a RefId field.\n\n    * refType\n\n        A string representing the reference key type if the field is a RefId field.\n\n    * arrayType\n\n        A string representing the underlying type if the field is an array.\n\n    * arrayPath\n\n        A string representing the base path of an array of subdocuments.\n\n    * base\n  \n        An array of base referenced model if the field is a field of a referenced model (containd a list of base if the field go through several referenced models).\n\n* search\n\n    An array containing the search strings or regular expressions for which the condition has to be built.\n\n* options\n\n    An object given to the dataTable method on the schema. This options object can be used to pass information to the condition handlers, like the locale if needed.\n\n##### Default condition handlers\n\n* String\n\n    Match anywere in the string in case insensitive mode.\n\n* Boolean\n\n    Match <i>true</i> or <i>false</i> in case insensitive mode.\n    \n* Date\n\n    The date search is composed in three parts, the <i>type</i> of the match, the <i>from</i> value and the <i>to</i> value.\n    The <i>from</i> and <i>to</i> value are String dates and the <i>to</i> value is only needed when the <i>type</i> is \"<>\".\n    The <i>type</i> can be \"=\" (same as no <i>type</i>), \">\", \"<\" or \"<>\" meaning respectively equals, greater than, less than or between.\n\n* Number\n\n    The date search is composed in three parts, the <i>type</i> of the match, the <i>from</i> value and the <i>to</i> value.\n    The <i>from</i> and <i>to</i> value are (String) numbers and the <i>to</i> value is only needed when the <i>type</i> is \"<>\".\n    The <i>type</i> can be \"=\" (same as no <i>type</i>), \">\", \"<\" or \"<>\" meaning respectively equals, greater than, less than or between.\n\n##### eg.\n\n<pre>\nconditionHandlers: {\n    String: StringHandler,\n    Boolean: booleanHandler,\n    Date: dateHandler,\n    default: defaultHandler\n}\n</pre>\n    \n## Initialization\n\n    var mongoose = require('mongoose');\n    mongoose.plugin(DataTable.init);\n\n## Usage\n\nThe method <i>datatable </i> was added to all the schema as static method. The method has for parameters:\n\n* dataTableQuery\n\n    The query parameters send by the dataTable client\n\n* options\n\n    Options pass to the condition handlers. OPTIONAL parameter.\n\n    * handlers\n\n        Handlers can be given to override the overall behavior of condition builder handlers.\n        The field options.handlers is an object with for keys either a field type (like String, Boolean,,,) or a field path (like username, name.firstName) and for values, functions like the condition handler functions.\n\n    * conditions\n\n        Conditions is an object as the mongoose find conditions. This conditions filter the dataTable data returned and the counts, it is applied as the first conjunction condition.\n\n    * select\n\n        Select is an object or a string as the mongoose query select argument. The select is applied on the find query that return the displayed entities.\n\n* callback\n\n    The callback called in case of error or when the data have been retrieved.\n\n<pre>\nvar MyModel = require('mongoose').model('MyModel');\nMyModel.dataTable(dataTableQueryParams, options, function(err, data) {\n    if(err) return manageError(err);\n    send(data);\n});\n</pre>\n\n## Chunk Search\n\nIf the dataTable on the client side is parametrized to send in the query the field <i>bChunkSearch</i> with for value 'true', the chunk search is activated.\nThe chunk search allows the user to specify in a the general search field specific field search.\n\n### eg.\n\nAdd the condition for the value \"test\" on the username field.\n<pre>@username:test</pre>\n\nAdd the condition for the value \"Mr Arthur Dent\" on the name field.\n<pre>@name:\"Mr Arthur Dent\"</pre>\n\nAdd the condition for the value \"test\" or \"admin\" on the username field.\n<pre>@username:test @username:admin</pre>\n\n## Support\n\n<a href=\"http://www.it-tweaks.com/\" target=\"_blank\">it-tweaks</a>\n\n## Example with Node\n\n<a href=\"http://intertherabbithole.wordpress.com/2014/01/24/using-jquery-datatables-with-nodejs-and-mongodb-using-mongoose-datatables/\" target=\"_blank\">Example using Node</a>\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/eherve/mongoose-datatable/issues"
  },
  "homepage": "https://github.com/eherve/mongoose-datatable",
  "_id": "mongoose-datatable@0.2.5",
  "dist": {
    "shasum": "3bc2c9a4cd5ee0e9fa05642cfdbbc52720be79f8"
  },
  "_from": "mongoose-datatable@*",
  "_resolved": "https://registry.npmjs.org/mongoose-datatable/-/mongoose-datatable-0.2.5.tgz"
}
