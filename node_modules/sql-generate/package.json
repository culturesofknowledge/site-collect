{
  "name": "sql-generate",
  "version": "0.3.0",
  "preferGlobal": true,
  "description": "Automatic generation of SQL definitions for use by the sql module",
  "keywords": [
    "sql",
    "generate"
  ],
  "author": {
    "name": "Tommy Montgomery",
    "email": "tmont@tmont.com",
    "url": "http://tmont.com/"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/tmont/node-sql-generate.git"
  },
  "bin": {
    "node-sql-generate": "bin/node-sql-generate.js"
  },
  "dependencies": {
    "mysql": "2.0.1",
    "pg": "2.11.1",
    "commander": "2.1.0",
    "async": "0.2.10",
    "colors": "0.6.2",
    "sql": "0.35.0"
  },
  "devDependencies": {
    "mocha": "1.17.1",
    "should": "3.1.2"
  },
  "scripts": {
    "test": "mocha -R spec tests"
  },
  "readme": "# node-sql-generate\n\n[![Build Status](https://travis-ci.org/tmont/node-sql-generate.png)](https://travis-ci.org/tmont/node-sql-generate)\n[![NPM version](https://badge.fury.io/js/sql-generate.png)](http://badge.fury.io/js/sql-generate)\n\nThis library is a command line tool/API for automatically generating\ndefinitions usable by the [node-sql](https://github.com/brianc/node-sql) library.\nIt inspects your database and generates JavaScript.\n\nCurrently there is support for MySQL and Postgres.\n\n## Installation\nInstall via NPM: `npm install -g sql-generate`\n\nThis will put the binary `node-sql-generate` in your path.\n\n## Usage\n### Command line\nIn its simplest form, you do something like this:\n`node-sql-generate --dsn \"mysql://user:password@server/database\"` which will\nspit out the generated code to stdout.\n\n```javascript\n// autogenerated by node-sql-generate v0.1.2 on Tue May 21 2013 01:04:12 GMT-0700 (PDT)\nvar sql = require('sql');\n\n/**\n * SQL definition for database.bar\n */\nexports.bar = sql.define({\n\tname: 'bar',\n\tcolumns: [\n\t\t'id',\n\t\t'foo_id'\n\t]\n});\n\n/**\n * SQL definition for database.foo\n */\nexports.foo = sql.define({\n\tname: 'foo',\n\tcolumns: [\n\t\t'id',\n\t\t'field_1',\n\t\t'foo_bar_baz'\n\t]\n});\n```\n\nIf your DSN isn't as specific (i.e. it just points to a socket file), then you'll\nneed to specify the database and dialect explicitly:\n`node-sql-generate --dsn \"/var/run/mysql.sock\" --database \"test\" --dialect \"mysql\"`\n\nPostgres users will need to specify a schema:\n`node-sql-generate --dsn \"postgres://user:password@server/database\" --schema \"test\"`.\n\nOmitting it will assume a schema of \"public\".\n\n#### `--help`\n```\n  Usage: node-sql-generate.js [options]\n\n  Options:\n\n    -h, --help                output usage information\n    -V, --version             output the version number\n    --dsn <dsn>               Connection string\n    -d, --dialect <dialect>   Specify the SQL dialect: \"mysql\" or \"pg\"\n    -o, --output-file <file>  Output to this file; defaults to stdout\n    -i, --indent <token>      Indentation token; defaults to a TAB character\n    -D, --database <name>     Name of database to extract from\n    -s, --schema <name>       Name of schema to extract from (Postgres only)\n    --camelize                Convert underscored names to camel case, requires sql >= 0.18.0\"\n    --eol <token>             Line terminator token; defaults to \"\\n\"\n    --mode <mode>             The permission mode of the generated file; defaults to 0644\n    --encoding <encoding>     The encoding to use for writing; defaults to \"utf8\"\n    --prepend <text>          Prepend text to the beginning of the file\n    --append <text>           Append text to the end of the file\n    --modularize              Omit \"require('sql')\" and wrap generated code in \"module.exports = function(sql) {...}\"\n    --omit-comments           Omit autogenerated comments\n    --include-schema          Include schema in definition\n    -v, --verbose             Print debugging information\n\nExample DSN:\n  PostgreSQL: \"postgres://user:password@host:5432/database\"\n       MySQL: \"mysql://user:password@host:3306/database\"\n```\n\n### API\nYou can also generate these files programmatically.\n\n```javascript\nvar generateSqlDefinition = require('sql-generate'),\n\toptions = {\n\t\tdsn: 'mysql://user:password@host/database',\n\t\tomitComments: true,\n\t\tprepend: '// (c) 2013 the raddest dude alive'\n\t};\n\ngenerateSqlDefinition(options, function(err, stats) {\n\tif (err) {\n\t\tconsole.error(err);\n\t\treturn;\n\t}\n\n\tconsole.log(stats.buffer);\n});\n```\n\n## Development\nTo run the tests, you'll need to install [Vagrant](http://www.vagrantup.com/).\n\n```bash\ngit clone git@github.com:tmont/node-sql-generate.git\ncd node-sql-generate\nnpm install\nvagrant up\nnpm test\n```",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/tmont/node-sql-generate/issues"
  },
  "homepage": "https://github.com/tmont/node-sql-generate",
  "_id": "sql-generate@0.3.0",
  "_from": "sql-generate@"
}
